local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local runService = game:GetService("RunService")
local sphereRadius = 20 -- Radius of the detection sphere
local bladeBall = workspace:FindFirstChild("BladeBall") -- Replace with the name of the ball

-- Create a visual representation of the sphere
local function createSphere()
    local spherePart = Instance.new("Part")
    spherePart.Name = "DetectionSphere"
    spherePart.Size = Vector3.new(sphereRadius * 2, sphereRadius * 2, sphereRadius * 2)
    spherePart.Shape = Enum.PartType.Ball
    spherePart.Material = Enum.Material.ForceField
    spherePart.Transparency = 0.5
    spherePart.CanCollide = false
    spherePart.Anchored = true
    spherePart.Color = Color3.new(0, 0, 1) -- Blue sphere
    spherePart.Parent = workspace
    return spherePart
end

-- Updates the sphere position to follow the player
local function updateSphere(sphere)
    if character and character:FindFirstChild("HumanoidRootPart") then
        sphere.Position = character.HumanoidRootPart.Position
    end
end

-- Perform the action when something enters the sphere
local function performAction()
    print("Blade Ball detected in sphere!") -- Replace this with your desired action
    if bladeBall then
        -- Example: Apply a force to the ball
        local ballVelocity = Instance.new("BodyVelocity")
        ballVelocity.Velocity = Vector3.new(0, 50, 0) -- Adjust direction and speed
        ballVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
        ballVelocity.Parent = bladeBall
        game.Debris:AddItem(ballVelocity, 0.2) -- Remove force after 0.2 seconds
    end
end

-- Monitor the sphere for objects entering
local function monitorSphere(sphere)
    runService.RenderStepped:Connect(function()
        if bladeBall and bladeBall:IsDescendantOf(workspace) then
            local distance = (bladeBall.Position - sphere.Position).Magnitude
            if distance <= sphereRadius then
                performAction()
            end
        end
    end)
end

-- Set up the detection sphere
local detectionSphere = createSphere()

-- Update the sphere's position in real-time
runService.RenderStepped:Connect(function()
    updateSphere(detectionSphere)
end)

-- Start monitoring the sphere
monitorSphere(detectionSphere)

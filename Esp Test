-- Local variables
local isEnabled = false  -- Whether the feature is enabled or not
local highlightConnections = {}  -- Store connections to remove them when disabling
local distanceConnections = {}  -- Store connections to remove them when disabling
local fruitHighlightConnections = {}  -- Store connections for fruit highlight
local userInputService = game:GetService("UserInputService")
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

-- Create the toggle button UI
local playerGui = player:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = playerGui

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 200, 0, 50)
toggleButton.Position = UDim2.new(0.5, -100, 0.9, -75)
toggleButton.Text = "Enable Highlighting"
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
toggleButton.Parent = screenGui

-- Make the button corners round
local buttonCorner = Instance.new("UICorner")
buttonCorner.CornerRadius = UDim.new(0, 25)  -- Adjust the second value for more or less rounding
buttonCorner.Parent = toggleButton

-- Variables for dragging
local dragging = false
local dragInput, dragStart, startPos

-- Function to highlight a player (excluding the local player)
local function highlightPlayer(player)
    if player.Character and player.Character:FindFirstChild("Head") then
        -- Exclude the local player from being highlighted
        if player == game.Players.LocalPlayer then
            return
        end

        -- Check if a highlight already exists
        local character = player.Character
        if character:FindFirstChild("Highlight") then
            return
        end

        -- Create a Highlight instance
        local highlight = Instance.new("Highlight")
        highlight.Adornee = character
        highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red color
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline
        highlight.OutlineTransparency = 0 -- Fully visible outline
        highlight.Parent = character

        -- Add a BillboardGui to display the player's username above their head
        if not character:FindFirstChild("PlayerNameDisplay") then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "PlayerNameDisplay"
            billboard.Adornee = character.Head
            billboard.Size = UDim2.new(4, 0, 1, 0)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Text = player.Name
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
            textLabel.TextScaled = false -- Disable TextScaled to control the text size manually
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.Parent = billboard

            billboard.Parent = character
        end

        -- Add a BillboardGui to display the distance from the local player
        if not character:FindFirstChild("PlayerDistanceDisplay") then
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "PlayerDistanceDisplay"
            billboard.Adornee = character:WaitForChild("HumanoidRootPart") -- Display the distance on the chest (HumanoidRootPart)
            billboard.Size = UDim2.new(4, 0, 1, 0)
            billboard.StudsOffset = Vector3.new(0, 2, 0) -- Display slightly above the chest
            billboard.AlwaysOnTop = true

            local textLabel = Instance.new("TextLabel")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
            textLabel.TextScaled = false -- Disable TextScaled to manually control the size
            textLabel.Font = Enum.Font.SourceSans
            textLabel.Parent = billboard

            -- Update the text to show the distance from the local player
            local function updateDistance()
                local distance = (player.Character.PrimaryPart.Position - game.Players.LocalPlayer.Character.PrimaryPart.Position).Magnitude
                textLabel.Text = string.format("Distance: %.2f studs", distance)

                -- Adjust the size of the text based on the distance
                local scale = math.clamp(distance / 50, 1, 5)  -- Distance will scale the text size, max size is 5x
                textLabel.TextSize = 14 * scale -- Text size increases with distance
            end

            -- Continuously update the distance
            game:GetService("RunService").Heartbeat:Connect(function()
                updateDistance()
            end)

            billboard.Parent = character
        end
    end
end

-- Function to scan for players in the server
local function scanForPlayers()
    local players = game:GetService("Players")
    for _, player in ipairs(players:GetPlayers()) do
        -- Only highlight players who have a character
        if player.Character then
            highlightPlayer(player)
        end
    end
end

-- Function to highlight fruit
local function highlightFruit(fruit)
    if fruit:IsA("Part") then
        -- Create a Highlight instance for the fruit
        local highlight = Instance.new("Highlight")
        highlight.Adornee = fruit
        highlight.FillColor = Color3.fromRGB(255, 255, 0) -- Yellow color for fruit
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- White outline
        highlight.OutlineTransparency = 0 -- Fully visible outline
        highlight.Parent = fruit
    end
end

-- Function to scan for fruits
local function scanForFruits()
    local workspace = game:GetService("Workspace")
    for _, object in ipairs(workspace:GetChildren()) do
        if object.Name:match("Fruit") and object:IsA("Part") then
            highlightFruit(object)
        end
    end
end

-- Function to remove all highlights from the game
local function removeHighlights()
    -- Remove all player highlights and distance displays
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Character then
            local character = player.Character
            local highlight = character:FindFirstChild("Highlight")
            if highlight then
                highlight:Destroy()
            end

            local distanceDisplay = character:FindFirstChild("PlayerDistanceDisplay")
            if distanceDisplay then
                distanceDisplay:Destroy()
            end
        end
    end

    -- Remove all fruit highlights
    local workspace = game:GetService("Workspace")
    for _, object in ipairs(workspace:GetChildren()) do
        if object.Name:match("Fruit") and object:IsA("Part") then
            local highlight = object:FindFirstChild("Highlight")
            if highlight then
                highlight:Destroy()
            end
        end
    end
end

-- Toggle the highlight feature
toggleButton.MouseButton1Click:Connect(function()
    if isEnabled then
        isEnabled = false
        toggleButton.Text = "Enable Highlighting"
        -- Disable the highlighting
        removeHighlights()  -- Properly remove all highlights
    else
        isEnabled = true
        toggleButton.Text = "Disable Highlighting"
        -- Enable the highlighting
        scanForPlayers() -- Begin scanning and highlighting players
        scanForFruits() -- Begin scanning and highlighting fruits
    end
end)

-- Dragging functionality for both Mouse and Touch
toggleButton.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = toggleButton.Position
    end
end)

toggleButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        toggleButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

toggleButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Continuously scan for players and fruits every 10 seconds
game:GetService("RunService").Heartbeat:Connect(function()
    if isEnabled then
        scanForPlayers()
        scanForFruits()
    end
end)
